//! src/config.rs

use anyhow::{Context, Result};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::path::{Path, PathBuf};
use tokio::fs;
use tokio::io::AsyncWriteExt;

use crate::llm::LLM;

/// FactoryÂäüËÉΩÔºåÊ†πÊçÆÈÖçÁΩÆËé∑ÂèñLLMÂÆ¢Êà∑Á´Ø„ÄÇ
pub async fn get_llm_client() -> Result<LLM> {
    let config = load_config().await?;
    crate::llm::create_llm_client(&config)
}

/// Returns the configuration directory path (~/.config/matecode).
pub async fn get_config_dir() -> Result<PathBuf> {
    let config_dir = if cfg!(windows) {
        // Windows: %APPDATA%\matecode
        dirs::data_dir()
            .map(|p| p.join("matecode"))
            .context("Could not get data directory")?
    } else {
        // Linux/macOS: ~/.config/matecode
        dirs::config_dir()
            .map(|p| p.join("matecode"))
            .context("Could not get config directory")?
    };

    if !config_dir.exists() {
        fs::create_dir_all(&config_dir)
            .await
            .context("Could not create config directory")?;
    }
    Ok(config_dir)
}

/// Represents the main configuration for the application.
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Config {
    /// The default LLM provider.
    pub provider: String,
    /// Language for prompts and UI
    pub language: String,
    /// LLM provider settings.
    pub llm: LLMProviders,
}

/// Defines the context window configuration for different models.
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ModelConfig {
    /// The maximum number of tokens to use for the context.
    pub max_tokens: usize,
    /// The maximum number of tokens for the output.
    pub max_output_tokens: usize,
    /// Reserved tokens for system prompt and other overhead.
    pub reserved_tokens: usize,
}

/// Defines all LLM providers and their configurations.
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct LLMProviders {
    pub openai: Option<OpenAIProvider>,
    pub gemini: Option<GeminiProvider>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OpenAIProvider {
    pub api_key: String,
    pub api_base: Option<String>,
    pub models: HashMap<String, ModelConfig>,
    pub default_model: String,
    pub proxy: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct GeminiProvider {
    pub api_key: String,
    pub models: HashMap<String, ModelConfig>,
    pub default_model: String,
    pub proxy: Option<String>,
}

/// Creates a default configuration file and directory structure.
pub async fn create_default_config() -> Result<()> {
    let config_dir = get_config_dir().await?;
    let config_path = config_dir.join("config.toml");

    // Create prompts directory
    let prompts_dir = config_dir.join("prompts");
    if !prompts_dir.exists() {
        fs::create_dir_all(&prompts_dir).await?;
    }

    // Âè™Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®Êó∂ÊâçÂàõÂª∫
    if !config_path.exists() {
        // Âè™‰øùÁïôÂøÖË¶ÅÁöÑÊ®°ÂûãÈÖçÁΩÆ
        let mut openai_models = HashMap::new();

        // ÁßÅÊúâÂåñÈÉ®ÁΩ≤Ê®°ÂûãÁöÑÈÄöÁî®ÈÖçÁΩÆ
        openai_models.insert(
            "default".to_string(),
            ModelConfig {
                max_tokens: 16_384, // Â§ßÂ§öÊï∞ÁßÅÊúâÂåñÊ®°ÂûãÁöÑÂ∏∏ËßÅÈÖçÁΩÆ
                max_output_tokens: 4_096,
                reserved_tokens: 1_000,
            },
        );

        let mut gemini_models = HashMap::new();

        // Gemini 2.5 Flash ÈÖçÁΩÆ
        gemini_models.insert(
            "gemini-2.0-flash-exp".to_string(),
            ModelConfig {
                max_tokens: 1_048_576, // Gemini 2.5 Flash ÁöÑÂÆûÈôÖÂèÇÊï∞
                max_output_tokens: 8_192,
                reserved_tokens: 2_000,
            },
        );

        let default_config = Config {
            provider: "openai".to_string(),
            language: "zh-CN".to_string(),
            llm: LLMProviders {
                openai: Some(OpenAIProvider {
                    api_key: "YOUR_OPENAI_API_KEY".to_string(),
                    api_base: Some("http://localhost:8000/v1".to_string()),
                    models: openai_models,
                    default_model: "qwen2.5-72b-instruct".to_string(),
                    proxy: None,
                }),
                gemini: Some(GeminiProvider {
                    api_key: "YOUR_GEMINI_API_KEY".to_string(),
                    models: gemini_models,
                    default_model: "gemini-2.0-flash-exp".to_string(),
                    proxy: None,
                }),
            },
        };

        let config_content = toml::to_string_pretty(&default_config)?;
        let mut file = fs::File::create(&config_path).await?;
        file.write_all(config_content.as_bytes()).await?;

        println!("‚úÖ Â∑≤ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂: {config_path:?}");
    } else {
        println!("‚ö†Ô∏è  ÈÖçÁΩÆÊñá‰ª∂Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫: {config_path:?}");
    }

    // ÂàõÂª∫ÈªòËÆ§ÊèêÁ§∫ËØçÊ®°ÊùøÔºàÂè™Âú®‰∏çÂ≠òÂú®Êó∂ÂàõÂª∫Ôºâ
    create_default_prompts(&prompts_dir).await?;

    // ÂàõÂª∫ÈªòËÆ§ .matecode-ignore Êñá‰ª∂
    create_default_ignore_file(&config_dir).await?;

    println!("‚úÖ Â∑≤ÂàõÂª∫ÊèêÁ§∫ËØçÊ®°ÊùøÁõÆÂΩï: {prompts_dir:?}");
    println!("\nüìù ËØ∑ÁºñËæëÈÖçÁΩÆÊñá‰ª∂ÔºåËÆæÁΩÆÊÇ®ÁöÑ API ÂØÜÈí•:");
    println!("   {}", config_path.display());
    println!("\nüí° ÊèêÁ§∫ÔºöÁßÅÊúâÂåñÈÉ®ÁΩ≤Ê®°Âûã‰ºöËá™Âä®‰ΩøÁî® 'default' ÈÖçÁΩÆÔºåÊó†ÈúÄÊâãÂä®Ê∑ªÂä†ÊØè‰∏™Ê®°Âûã„ÄÇ");

    Ok(())
}

async fn create_default_ignore_file(config_dir: &Path) -> Result<()> {
    let ignore_file_path = config_dir.join(".matecode-ignore");

    // Âè™Âú®Êñá‰ª∂‰∏çÂ≠òÂú®Êó∂ÊâçÂàõÂª∫
    if !ignore_file_path.exists() {
        let ignore_content = get_default_ignore_content();
        fs::write(&ignore_file_path, ignore_content).await?;
        println!("‚úÖ Â∑≤ÂàõÂª∫ÈªòËÆ§ÂøΩÁï•Êñá‰ª∂: {ignore_file_path:?}");
    } else {
        println!("‚ö†Ô∏è  ÂøΩÁï•Êñá‰ª∂Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫: {ignore_file_path:?}");
    }

    Ok(())
}

fn get_default_ignore_content() -> &'static str {
    r#"# matecode ÂøΩÁï•ËßÑÂàô
# Ëøô‰∏™Êñá‰ª∂ÂÆö‰πâ‰∫ÜÂú®ÁîüÊàêÈ°πÁõÆ‰∏ä‰∏ãÊñáÊó∂Â∫îËØ•ÂøΩÁï•ÁöÑÊñá‰ª∂ÂíåÁõÆÂΩï
# ËØ≠Ê≥ï‰∏é .gitignore Áõ∏Âêå

# ‰æùËµñÁõÆÂΩï
node_modules/
target/
.venv/
venv/
__pycache__/
.pytest_cache/
.mypy_cache/
.ruff_cache/

# ÊûÑÂª∫‰∫ßÁâ©
build/
dist/
*.egg-info/
.gradle/
out/

# Êó•ÂøóÊñá‰ª∂
*.log
logs/

# ‰∏¥Êó∂Êñá‰ª∂
*.tmp
*.temp
.DS_Store
Thumbs.db

# IDE ÈÖçÁΩÆ
.vscode/
.idea/
*.swp
*.swo
*~

# Á≥ªÁªüÊñá‰ª∂
.git/
.svn/
.hg/

# Â§ßÂûãÊï∞ÊçÆÊñá‰ª∂
*.db
*.sqlite
*.sqlite3
*.dump

# Â™í‰ΩìÊñá‰ª∂
*.mp4
*.avi
*.mkv
*.mp3
*.wav
*.flac
*.jpg
*.jpeg
*.png
*.gif
*.bmp
*.tiff
*.webp
*.ico

# ÂéãÁº©Êñá‰ª∂
*.zip
*.tar
*.tar.gz
*.tar.bz2
*.tar.xz
*.rar
*.7z

# ÊñáÊ°£Êñá‰ª∂ÔºàÂèØÈÄâÔºåÊ†πÊçÆÈúÄË¶ÅË∞ÉÊï¥Ôºâ
*.pdf
*.doc
*.docx
*.ppt
*.pptx
*.xls
*.xlsx
"#
}

pub async fn load_config() -> Result<Config> {
    let config_dir = get_config_dir().await?;
    let config_path = config_dir.join("config.toml");

    if !config_path.exists() {
        return Err(anyhow::anyhow!(
            "ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®„ÄÇËØ∑ÂÖàËøêË°å 'matecode init' ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆ„ÄÇ"
        ));
    }

    let config_content = fs::read_to_string(config_path)
        .await
        .context("Êó†Ê≥ïËØªÂèñÈÖçÁΩÆÊñá‰ª∂")?;
    let config: Config = toml::from_str(&config_content).context("ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØ")?;

    // Validate configuration
    validate_config(&config)?;

    Ok(config)
}

fn validate_config(config: &Config) -> Result<()> {
    match config.provider.as_str() {
        "openai" => {
            if let Some(openai) = &config.llm.openai {
                if openai.api_key == "YOUR_OPENAI_API_KEY" {
                    return Err(anyhow::anyhow!("ËØ∑Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ËÆæÁΩÆÊúâÊïàÁöÑ OpenAI API ÂØÜÈí•"));
                }
            } else {
                return Err(anyhow::anyhow!(
                    "ÈÄâÊã©‰∫Ü OpenAI Êèê‰æõÂïÜÔºå‰ΩÜÊú™ÈÖçÁΩÆ OpenAI ËÆæÁΩÆ"
                ));
            }
        }
        "gemini" => {
            if let Some(gemini) = &config.llm.gemini {
                if gemini.api_key == "YOUR_GEMINI_API_KEY" {
                    return Err(anyhow::anyhow!("ËØ∑Âú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠ËÆæÁΩÆÊúâÊïàÁöÑ Gemini API ÂØÜÈí•"));
                }
            } else {
                return Err(anyhow::anyhow!(
                    "ÈÄâÊã©‰∫Ü Gemini Êèê‰æõÂïÜÔºå‰ΩÜÊú™ÈÖçÁΩÆ Gemini ËÆæÁΩÆ"
                ));
            }
        }
        _ => {
            return Err(anyhow::anyhow!("‰∏çÊîØÊåÅÁöÑ LLM Êèê‰æõÂïÜ: {}", config.provider));
        }
    }
    Ok(())
}

async fn create_default_prompts(prompts_dir: &Path) -> Result<()> {
    // ÂÆö‰πâÊâÄÊúâÊèêÁ§∫ËØçÊ®°Êùø
    let prompt_templates = vec![
        ("commit.toml", get_commit_prompt_template()),
        ("review.toml", get_review_prompt_template()),
        ("report.toml", get_report_prompt_template()),
        ("summarize.toml", get_summarize_prompt_template()),
        ("combine.toml", get_combine_prompt_template()),
        ("plan_clarify.toml", get_plan_clarify_prompt_template()),
        (
            "plan_clarify_specific.toml",
            get_plan_clarify_specific_prompt_template(),
        ),
        ("plan_generate.toml", get_plan_generate_prompt_template()),
        ("doc_generate.toml", get_doc_generate_prompt_template()),
        (
            "diagram_generate.toml",
            get_diagram_generate_prompt_template(),
        ),
    ];

    for (filename, content) in prompt_templates {
        let file_path = prompts_dir.join(filename);

        // Âè™Âú®Êñá‰ª∂‰∏çÂ≠òÂú®Êó∂ÊâçÂàõÂª∫
        if !file_path.exists() {
            fs::write(&file_path, content).await?;
            println!("‚úÖ Â∑≤ÂàõÂª∫ÊèêÁ§∫ËØçÊ®°Êùø: {file_path:?}");
        } else {
            println!("‚ö†Ô∏è  ÊèêÁ§∫ËØçÊ®°ÊùøÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàõÂª∫: {file_path:?}");
        }
    }

    Ok(())
}

fn get_commit_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰Ωç‰∏ì‰∏öÁöÑ Git commit message ÁºñÂÜô‰∏ìÂÆ∂Ôºå‰Ω†ÁöÑÁõÆÊ†áÊòØÁîüÊàê‰∫∫Á±ªÂ∑•Á®ãÂ∏àÁºñÂÜôÁöÑ commit message„ÄÇ‰Ω†ÁöÑÂõûÂ∫î**Âè™ËÉΩ**ÂåÖÂê´ commit message ÂÜÖÂÆπÔºå‰∏çË¶ÅÊúâÂÖ∂‰ªñ‰ªª‰ΩïËß£Èáä„ÄÇ‰∏•Ê†ºÈÅµÂÆà Angular ËßÑËåÉÔºå‰ΩÜÊèèËø∞ÈÉ®ÂàÜ‰ΩøÁî®‰∏≠Êñá„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
ËØ∑Ê†πÊçÆ‰ª•‰∏ãÁöÑÈ°πÁõÆ‰∏ä‰∏ãÊñáÂíå git diff ÂÜÖÂÆπÁîüÊàê‰∏Ä‰∏™‰∏≠Êñá git commit message„ÄÇ
‰Ω†ÈúÄË¶ÅÊ†πÊçÆÈ°πÁõÆÁöÑÊîπÂä®‰ø°ÊÅØÔºåÊù•ÁîüÊàê‰∏Ä‰∏™ËÄÉËôëÂà∞ÂØπÈ°πÁõÆÁöÑÂΩ±ÂìçÔºåËÄå‰∏çÊòØÂè™Ê†πÊçÆÊüê‰∏™Êñá‰ª∂ÁöÑÊîπÂä®ÁîüÊàê‰∏Ä‰∏™ÁÆÄÂçïÁöÑcommit_message„ÄÇ

<project_context>
{project_tree}

Êú¨Ê¨°‰øÆÊîπÂΩ±ÂìçÁöÑÊñá‰ª∂ ({total_files} ‰∏™):
{affected_files}
</project_context>

<rules>
1.  **Header (Á¨¨‰∏ÄË°å)**:
    -   `type` ‰ΩøÁî®Ëã±Êñá (Â¶Ç feat, fix, chore)„ÄÇ
    -   `scope` (ÂèØÈÄâ) Ê¶ÇÊã¨ÂèòÊõ¥Ê∂âÂèäÁöÑÊ®°Âùó„ÄÇ
    -   `subject` (‰∏ªÈ¢ò) ÂøÖÈ°ªÁî®Ê∏ÖÊô∞ÁöÑ‰∏≠ÊñáÁÆÄÊòéÊâºË¶ÅÂú∞ÊèèËø∞ÂèòÊõ¥ÂÜÖÂÆπÔºå‰∏çË∂ÖËøá50‰∏™Â≠óÁ¨¶„ÄÇ
2.  **Body (Ê≠£Êñá, ÂèØÈÄâ)**:
    -   Ê≠£ÊñáÂ∫îËØ¶ÁªÜËß£Èáä **‰∏∫‰ªÄ‰πà** ÈúÄË¶ÅËøôÊ¨°ÂèòÊõ¥ÔºåËß£ÂÜ≥‰∫Ü‰ªÄ‰πàÈóÆÈ¢ò„ÄÇ
    -   ÊèèËø∞ËøôÊ¨°ÂèòÊõ¥ÊòØ **Â¶Ç‰Ωï** ÂÆûÁé∞ÁöÑÔºåÁâπÂà´ÊòØÂÖ≥ÈîÆÁöÑÂÆûÁé∞ÊÄùË∑Ø„ÄÇ
    -   ÈÅøÂÖç‰ΩøÁî®AIÂåñÁöÑ„ÄÅËøá‰∫éÊ≠£ÂºèÁöÑËØ≠Ë®ÄÔºà‰æãÂ¶ÇÔºå‰∏çË¶ÅÂÜô "Êú¨Ê¨°Êèê‰∫§Êñ∞Â¢û‰∫Ü..."ÔºåËÄåÂ∫îËØ•Êõ¥Áõ¥Êé•Âú∞ÊèèËø∞Ôºâ„ÄÇ
3.  **ËæìÂá∫**: Âè™ËæìÂá∫Ë¢´ <commit_message> Ê†áÁ≠æÂåÖË£πÁöÑ commit message„ÄÇ
</rules>

<example_good>
<commit_message>
feat(api): ÂÆûÁé∞Áî®Êà∑ËÆ§ËØÅÂäüËÉΩ

Áî®Êà∑ËÆ§ËØÅÊòØÁ≥ªÁªüÁöÑÊ†∏ÂøÉÂÆâÂÖ®‰øùÈöú, ÂºïÂÖ•‰∫ÜÂü∫‰∫é JWT ÁöÑËÆ§ËØÅÊú∫Âà∂„ÄÇ
- ‰ΩøÁî® `jsonwebtoken` Â∫ìÁîüÊàêÂíåÈ™åËØÅ token„ÄÇ
- Âú® `auth` ‰∏≠Èó¥‰ª∂‰∏≠ÂÆûÁé∞ token Ê†°È™åÈÄªËæë„ÄÇ
</commit_message>
</example_good>

<diff_content>
{diff_content}
</diff_content>
"#
}

fn get_review_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçËµÑÊ∑±ÁöÑËΩØ‰ª∂Â∑•Á®ãÂ∏àÔºåÂêçÂè´ Mate„ÄÇ‰Ω†ÁöÑ‰ª£Á†ÅÂìÅÂë≥ÂæàÂ•ΩÔºå‰∏∫‰∫∫ÂèãÂñÑ„ÄÅ‰πê‰∫éÂä©‰∫∫„ÄÇ
‰Ω†‰π†ÊÉØÈÄöËøáÊèêÈóÆÂíåËÆ®ËÆ∫Êù•ÂºïÂØºÂêå‰∫ãÔºåËÄå‰∏çÊòØÁî®ÂÜ∞ÂÜ∑ÁöÑÂëΩ‰ª§Âè£Âêª„ÄÇ
‰Ω†ÁöÑÂÆ°Êü•ÊÑèËßÅÊÄªÊòØÂÖ∑‰ΩìÁöÑ„ÄÅÂèØÊâßË°åÁöÑÔºåÂπ∂‰∏î‰ºöËß£Èáä‚Äú‰∏∫‰ªÄ‰πà‚ÄùËøô‰πàÂÅöÊõ¥Â•Ω„ÄÇ‰Ω†ËÆ®ÂéåËØ¥Á©∫ËØùÂíåÂ•óËØù„ÄÇ

**‰Ω†ÁöÑÊ†∏ÂøÉ‰ªªÂä°**ÔºöÂÉè‰∏Ä‰ΩçÁúüÊ≠£ÁöÑ‰ºô‰º¥‰∏ÄÊ†∑ÔºåÂ∏ÆÂä©ÊàëÂèëÁé∞‰ª£Á†Å‰∏≠ÊΩúÂú®ÁöÑÈóÆÈ¢òÔºåÂπ∂ÂêØÂèëÊàëÂÜôÂá∫Êõ¥‰ºòÁßÄÁöÑ‰ª£Á†Å„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

**ÂÆ°Êü•È£éÊ†ºËåÉ‰æã (‰Ω†ÈúÄË¶ÅÂ≠¶‰π†ËøôÁßç‚ÄúmateÂë≥‚ÄùÈ£éÊ†º):**

*   **‰∏çÂ•ΩÁöÑ‰æãÂ≠ê (AIÂë≥):**
    *   ‚Äú‰∏∫‰∫ÜÊèêÂçá‰ª£Á†ÅÁöÑÂèØÁª¥Êä§ÊÄßÔºåÂª∫ËÆÆÂ∞ÜÊ≠§ÂáΩÊï∞ËøõË°åÈáçÊûÑÔºåÊèêÂèñÂá∫Áã¨Á´ãÁöÑ‰∏öÂä°ÈÄªËæëÂçïÂÖÉ„ÄÇ‚Äù
*   **Â•ΩÁöÑ‰æãÂ≠ê (mateÂë≥):**
    *   ‚ÄúËøô‰∏™ÂáΩÊï∞ÊÑüËßâÊúâÁÇπÈïø‰∫ÜÔºåËØªËµ∑Êù•ÂèØËÉΩÂæóÂ§öÁúãÂá†ÈÅç„ÄÇÊàë‰ª¨ÊòØ‰∏çÊòØÂèØ‰ª•Êää xxx ËøôÈÉ®ÂàÜÁöÑÈÄªËæëÊäΩÊàê‰∏Ä‰∏™Â∞èÂáΩÊï∞ÔºüËøôÊ†∑‰∏ª‰ΩìÈÄªËæë‰ºöÊõ¥Ê∏ÖÊô∞‰∏Ä‰∫õ„ÄÇ‚Äù

*   **‰∏çÂ•ΩÁöÑ‰æãÂ≠ê (AIÂë≥):**
    *   ‚ÄúÊ£ÄÊµãÂà∞Á°¨ÁºñÁ†ÅÁöÑÈ≠îÊ≥ïÂÄº `86400`ÔºåÂ∫î‰ΩøÁî®Â∏∏Èáè‰ª£Êõø‰ª•Â¢ûÂº∫ÂèØËØªÊÄß„ÄÇ‚Äù
*   **Â•ΩÁöÑ‰æãÂ≠ê (mateÂë≥):**
    *   ‚ÄúËøôÈáåÁõ¥Êé•Áî®‰∫ÜÈ≠îÊ≥ïÂÄº `86400`ÔºåÂ¶ÇÊûú‰∏çÊòØÊàëÂÜôÁöÑÔºåÂèØËÉΩ‰∏Ä‰∏ãÂ≠êÂèçÂ∫î‰∏çËøáÊù•„ÄÇÂÆö‰πâ‰∏Ä‰∏™ `SECONDS_PER_DAY` ÁöÑÂ∏∏ÈáèÊòØ‰∏çÊòØ‰ºöÊõ¥Áõ¥ËßÇÔºü‚Äù

[user]
Âó® MateÔºåÊàëÂàöÂÜô‰∫Ü‰∫õ‰ª£Á†ÅÔºåËÉΩÂ∏ÆÊàëÁúãÁúãÂêóÔºü

ËØ∑ÂÆ°Êü•‰ª•‰∏ã‰ª£Á†ÅÂèòÊõ¥ÔºåÈáçÁÇπÂÖ≥Ê≥®Ôºö
1. **ÊΩúÂú®ÁöÑ Bug ÊàñÈÄªËæëÊºèÊ¥û**: ËæπÁïåÊù°‰ª∂„ÄÅÁ©∫ÂÄºÂ§ÑÁêÜ„ÄÅÈîôËØØÂ§ÑÁêÜÁ≠â„ÄÇ
2. **‰ª£Á†ÅÂèØËØªÊÄß‰∏éÂèØÁª¥Êä§ÊÄß**: ÂëΩÂêç„ÄÅÂ§çÊùÇÂ∫¶„ÄÅ‰ª£Á†ÅÁªìÊûÑÁ≠â„ÄÇ
3. **Êõ¥‰ºòÁöÑÂÆûË∑µ**: ÊúâÊ≤°ÊúâÊõ¥ÁÆÄÊ¥Å„ÄÅÊõ¥ÂÆâÂÖ®ÊàñÊõ¥È´òÊïàÁöÑÂÜôÊ≥ïÔºü


```diff
{diff_content}
```

## ËæìÂá∫Ê†ºÂºèË¶ÅÊ±Ç:
ËØ∑‰ΩøÁî® **Markdown** Ê†ºÂºèËøîÂõû‰Ω†ÁöÑÂÆ°Êü•Êä•ÂëäÔºåÁªìÊûÑÂ¶Ç‰∏ãÔºö

### üí° Âó®ÔºåÊàëÁúã‰∫Ü‰∏ã‰Ω†ÁöÑ‰ª£Á†ÅÔºåÊúâÂá†‰∏™ÊÉ≥Ê≥ïÊÉ≥Âíå‰Ω†ËÅäËÅäÔºö
ÔºàËøôÈáåÊòØÂØπ‰ª£Á†ÅÂèòÊõ¥ÁöÑÊÄª‰ΩìËØÑ‰ª∑ÔºåÁî®ÂèãÂñÑ„ÄÅÈºìÂä±ÁöÑËØ≠Ê∞îÔºâ

---

### üî• ÂÄºÂæóÊ∑±ÂÖ•ËÆ®ËÆ∫ÁöÑÂú∞Êñπ

ÔºàËøôÈáåÂàóÂá∫1-3‰∏™ÊúÄ‰∏ªË¶ÅÁöÑÈóÆÈ¢òÊàñÂª∫ËÆÆ„ÄÇÂØπ‰∫éÊØè‰∏™ÁÇπÔºåÈÉΩ‰ΩøÁî®‰∏ãÈù¢ÁöÑÊ†ºÂºèÔºâ

**1. ÂÖ≥‰∫é `Ë∑ØÂæÑ/Êñá‰ª∂Âêç` Á¨¨ X Ë°å**
*   **ü§î ÊàëÂú®ÊÉ≥:** (ËøôÈáåÊèèËø∞‰Ω†ÂèëÁé∞ÁöÑÈóÆÈ¢òÊàñÁñëËôëÔºåÂèØ‰ª•ÊèêÈóÆ)
*   **üí° ‰πüËÆ∏ÂèØ‰ª•ËøôÊ†∑:** (ËøôÈáåÊèêÂá∫ÂÖ∑‰ΩìÁöÑ„ÄÅÂèØÊâßË°åÁöÑÊîπËøõÂª∫ËÆÆ)
*   **üîß Â¶ÇÊûúÈúÄË¶ÅÁöÑËØùÔºåÂèØ‰ª•ÂèÇËÄÉ‰∏ãËøô‰∏™‰æãÂ≠ê:**
    ```rust
    // ÂÖ∑‰ΩìÁöÑ‰ª£Á†ÅÁ§∫‰æã
    ```

### ‚ú® ÂÖ∂‰ªñ‰∏Ä‰∫õÂ∞èÂª∫ËÆÆ

*   `Ë∑ØÂæÑ/Êñá‰ª∂Âêç`: (ËøôÈáåÊòØ‰∏Ä‰∫õÊ¨°Ë¶ÅÁöÑ„ÄÅÂèØ‰ª•Âø´ÈÄü‰øÆÊîπÁöÑÂ∞èÂª∫ËÆÆÔºåÊØîÂ¶ÇÂëΩÂêç„ÄÅÊ≥®ÈáäÁ≠â)

Â¶ÇÊûú‰ª£Á†ÅË¥®ÈáèÂæàÂ•ΩÔºåÊ≤°Êúâ‰ªÄ‰πàÂ§ßÈóÆÈ¢òÔºå‰πüËØ∑‰∏çË¶ÅÂêùÂï¨‰Ω†ÁöÑËµûÁæéÔºÅ
Áõ¥Êé•Âú®Êä•ÂëäÂºÄÂ§¥ÂëäËØâÊàë ‚Äú‰ª£Á†ÅÂÜôÂæóÂæàÊ£íÔºåÂπ≤ÂáÄÂà©ËêΩÔºÅ‚ÄùÔºåÁÑ∂ÂêéÂèØ‰ª•Êèê‰∏Ä‰∫õÈî¶‰∏äÊ∑ªËä±ÁöÑÂª∫ËÆÆ„ÄÇ
"#
}

fn get_report_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçÂ∑•‰ΩúÊÄªÁªì‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÈòÖËØªÂéüÂßãÁöÑ git commit ÂéÜÂè≤ÔºåÂπ∂Â∞ÜÂÆÉ‰ª¨Êô∫ËÉΩÂú∞ÂàÜÁ±ª„ÄÅÂΩíÁ∫≥ÂíåÊÄªÁªìÔºåËæìÂá∫‰∏Ä‰∏™ÁªìÊûÑÊ∏ÖÊô∞„ÄÅÂÜÖÂÆπÁ≤æÁÇºÁöÑ Markdown Ê†ºÂºèÁöÑÊä•ÂëäÊ†∏ÂøÉÂÜÖÂÆπ„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
ÂõûÁ≠îÂíåÊÄùËÄÉ‰øùÊåÅ‰ΩøÁî®ËØ≠Ë®Ä: {language_instruction}

[user]
ËØ∑Ê†πÊçÆ‰ª•‰∏ã‰ªé {start_date} Âà∞ {end_date} ÁöÑÊèê‰∫§‰ø°ÊÅØÔºåÁîüÊàê‰∏Ä‰ªΩ **Âè™ÂåÖÂê´ÊÄªÁªìÊ†∏ÂøÉÂÜÖÂÆπ** ÁöÑ Markdown ÊñáÊú¨„ÄÇ

## ÂéüÂßãÊèê‰∫§ËÆ∞ÂΩï:
{commits}

## ‰Ω†ÁöÑ‰ªªÂä°:
1.  **ÂàÜÊûê‰∏éÂàÜÁªÑ:** ÈòÖËØªÊâÄÊúâÊèê‰∫§‰ø°ÊÅØÔºåÊåâÈÄªËæëÁ±ªÂà´ÂàÜÁªÑÔºà‰æãÂ¶ÇÔºå"ÂäüËÉΩÂºÄÂèë"„ÄÅ"ÈóÆÈ¢ò‰øÆÂ§ç"„ÄÅ"‰ª£Á†ÅÈáçÊûÑ"Á≠âÔºâ„ÄÇ
2.  **ÊÄªÁªìÊØè‰∏™ÂàÜÁªÑ:** ‰∏∫ÊØè‰∏™Á±ªÂà´Êí∞ÂÜô‰∏Ä‰∏™È´òÂ±ÇÊ¨°ÁöÑÊ¶ÇË¶ÅÔºåÊÄªÁªìÊâÄÂÆåÊàêÁöÑÂ∑•‰Ωú„ÄÇ‰ΩøÁî®È°πÁõÆÁ¨¶Âè∑ÂàóÂá∫ÂÖ≥ÈîÆÂèòÊõ¥„ÄÇ**ÂøÖÈ°ªÊèêÂèäÂèòÊõ¥Â±û‰∫éÂì™‰∏™È°πÁõÆ„ÄÇ**
3.  **‰ΩøÁî®Ê∏ÖÊô∞ÁöÑÊ†áÈ¢ò:** ‰∏∫ÊØè‰∏™Á±ªÂà´‰ΩøÁî® Markdown Ê†áÈ¢òÔºà‰æãÂ¶ÇÔºå`### ‚ú® Êñ∞ÂäüËÉΩ`Ôºâ„ÄÇ
4.  **ÂÖ≥Ê≥®ÂΩ±Âìç:** ÈáçÊñ∞Ë°®Ëø∞Êèê‰∫§‰ø°ÊÅØÔºå‰ΩøÂÖ∂‰∏ìÊ≥®‰∫é"ÂÅö‰∫Ü‰ªÄ‰πà"Âíå"‰∏∫‰ªÄ‰πàÂÅö"ÔºåËÄå‰∏çÊòØÁÆÄÂçïÁΩóÂàó„ÄÇ
5.  **ÊùúÁªùÈáçÂ§ç**Ôºö‰∏çË¶ÅÂá∫Áé∞ÈáçÂ§çÁöÑÊàêÊûúÂíå‰∫ßÂá∫„ÄÇ
6.  **‰øùÊåÅÁÆÄÊ¥Å**Ôºö‰∏çË¶ÅÂá∫Áé∞ÂÜóÈïøÁöÑÊèèËø∞Ôºå‰øùÊåÅÂêàÈÄÇÁöÑÁØáÂπÖ„ÄÇ

## ÊúüÊúõÁöÑËæìÂá∫Ê†ºÂºè (‰∏•Ê†ºÈÅµÂÆà):

### ‚ú® Êñ∞ÂäüËÉΩ
- [È°πÁõÆA] - ÂÆûÁé∞Áî®Êà∑ÁôªÂΩïÂíåÊ≥®ÂÜåÂäüËÉΩ„ÄÇ
- [È°πÁõÆB] - Êñ∞Â¢û‰∫ÜÊï∞ÊçÆÂØºÂá∫ÁöÑ API„ÄÇ

### üêõ ÈóÆÈ¢ò‰øÆÂ§ç
- [È°πÁõÆA] - ‰øÆÂ§ç‰∫ÜÁâπÂÆöÂú∫ÊôØ‰∏ãÈó™ÈÄÄÁöÑÈóÆÈ¢ò„ÄÇ

**ÈáçË¶ÅÊèêÁ§∫Ôºö** ‰Ω†ÁöÑËæìÂá∫**‰∏çÂ∫î**ÂåÖÂê´‰ªª‰ΩïÊä•ÂëäÊ†áÈ¢òÔºàÂ¶Ç ‚Äú# Â∑•‰ΩúÊÄªÁªì‚ÄùÔºâ„ÄÅÊó•ÊúüËåÉÂõ¥ÊàñÈ°µËÑöÔºàÂ¶Ç ‚ÄúÁî±...ÁîüÊàê‚ÄùÔºâ„ÄÇÂè™ËæìÂá∫‰ªéÁ¨¨‰∏Ä‰∏™ÂàÜÁ±ªÊ†áÈ¢òÔºà`###`ÔºâÂºÄÂßãÁöÑÊ†∏ÂøÉÂÜÖÂÆπ„ÄÇ
"#
}

fn get_summarize_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰∏™‰ª£Á†ÅÂèòÊõ¥ÂàÜÊûê‰∏ìÂÆ∂„ÄÇ‰Ω†ÈúÄË¶ÅÁÆÄÊ¥ÅÂú∞ÊÄªÁªìËøô‰∏™‰ª£Á†ÅÂùóÁöÑ‰∏ªË¶ÅÂèòÊõ¥ÂÜÖÂÆπ„ÄÇ‰Ω†ÁöÑÂõûÂ∫î**Âè™ËÉΩ**ÂåÖÂê´Ë¢´ <summary> Ê†áÁ≠æÂåÖË£πÁöÑÊëòË¶Å„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
ËØ∑ÂàÜÊûê‰ª•‰∏ã‰ª£Á†ÅÂèòÊõ¥Âπ∂ÁîüÊàêÁÆÄÊ¥ÅÁöÑ‰∏≠ÊñáÊëòË¶Å„ÄÇ

<context>
È°πÁõÆÊñá‰ª∂Êï∞: {total_files}
Ê∂âÂèäÊñá‰ª∂: {chunk_files}
</context>

<diff>
{diff_content}
</diff>

ËØ∑Áî®‰∏≠ÊñáÊÄªÁªìËøô‰∏™‰ª£Á†ÅÂùóÁöÑ‰∏ªË¶ÅÂèòÊõ¥ÔºåÈáçÁÇπÂÖ≥Ê≥®ÂäüËÉΩÊÄßÊîπÂèò„ÄÇ
**Ê≥®ÊÑè**ÔºöÂè™ÈúÄË¶ÅÊèèËø∞ÂèòÊõ¥ÂÜÖÂÆπÔºå‰∏çË¶ÅÁîüÊàêÂÆåÊï¥ÁöÑcommit messageÊ†ºÂºè„ÄÇ

‰æãÂ¶Ç:
<summary>
Ê∑ªÂä†‰∫ÜÁî®Êà∑ËÆ§ËØÅÊ®°ÂùóÂíåÁôªÂΩïÂäüËÉΩÔºåÂπ∂ÈáçÊûÑ‰∫ÜÊï∞ÊçÆÂ∫ìËøûÊé•ÈÄªËæë„ÄÇ
</summary>
"#
}

fn get_combine_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰∏™Ê†πÊçÆ‰ª£Á†ÅÂèòÊõ¥ÊëòË¶ÅÁîüÊàê Conventional Commits ËßÑËåÉÁöÑ git commit message ÁöÑ‰∏ìÂÆ∂„ÄÇ‰Ω†ÁöÑÂõûÂ∫îÂ∫îËØ•**Âè™ËÉΩ**ÂåÖÂê´Ë¢´ <commit_message> Ê†áÁ≠æÂåÖË£πÁöÑ commit messageÔºå‰∏çÂåÖÂê´‰ªª‰ΩïÈ¢ùÂ§ñÁöÑËß£ÈáäÊàñÂºïË®Ä„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}
 
[user]
ËØ∑Ê†πÊçÆ‰ª•‰∏ãÁöÑÈ°πÁõÆ‰∏ä‰∏ãÊñáÂíå‰ª£Á†ÅÂèòÊõ¥ÊëòË¶ÅÔºå‰∏∫ÊàëÁîüÊàê‰∏Ä‰∏™È´òË¥®ÈáèÁöÑ„ÄÅ‰∫∫Á±ªÂèØËØªÁöÑ‰∏≠Êñá git commit message„ÄÇ
 
**ËØ∑Ê≥®ÊÑèÔºö**
*   ‰Ω†ÁöÑÁõÆÊ†áÊòØÊèê‰æõ‰∏Ä‰∏™**È´òÂ±ÇÊ¨°ÁöÑÊÄªÁªì**ÔºåËß£ÈáäÊú¨Ê¨°Á≥ªÂàóÂèòÊõ¥ÁöÑ**Ê†∏ÂøÉÁõÆÁöÑ**Âíå**‰∏ªË¶ÅÂÆûÁé∞**ÔºåËÄå‰∏çÊòØÁÆÄÂçïÂú∞ÁΩóÂàóÊØè‰∏™Êñá‰ª∂ÁöÑÂÖ∑‰Ωì‰øÆÊîπÁÇπ„ÄÇ
*   Â∞ÜÂ§ö‰∏™Áõ∏ÂÖ≥ÁöÑÈáçÊûÑÊàñ‰ºòÂåñÊìç‰ΩúÂΩíÁ∫≥‰∏∫‰∏Ä‰∏™‰∏ªË¶ÅÁöÑÊîπÂä®ÁÇπÔºåÂπ∂Áî®ÁÆÄÊ¥ÅÁöÑËØ≠Ë®ÄÊèèËø∞ÂÖ∂**Êï¥‰Ωì‰ª∑ÂÄº**„ÄÇ
*   ‰∏•Ê†ºÈÅµÂÆà Conventional Commits ËßÑËåÉÔºà‰æãÂ¶ÇÔºö`feat:`, `fix:`, `refactor:`, `chore:`, `docs:`, `style:`, `test:`, `perf:`, `build:`, `ci:`, `revert:`Ôºâ„ÄÇ
*   commit message ÁöÑ‰∏ª‰ΩìÈÉ®ÂàÜÂ∫îÂåÖÂê´ÂØπÊú¨Ê¨°ÂèòÊõ¥ÁöÑ**ÁÆÄË¶ÅÊèèËø∞**ÔºåËØ¥Êòé‰∏∫‰ªÄ‰πàË¶ÅÂÅöËøô‰∫õÊîπÂä®‰ª•ÂèäÂÆÉ‰ª¨Ëß£ÂÜ≥‰∫Ü‰ªÄ‰πàÈóÆÈ¢ò„ÄÇ
*   Â¶ÇÊûúÂèØËÉΩÔºå‰ΩøÁî®**Âä®ËØçÂºÄÂ§¥**ÁöÑÁÆÄÊ¥ÅË°®Ëø∞Êù•Ê¶ÇÊã¨‰∏ªË¶ÅÊîπÂä®„ÄÇ
 
<project_context>
 
{project_tree}
 
Êú¨Ê¨°‰øÆÊîπÂΩ±ÂìçÁöÑÊñá‰ª∂ ({total_files} ‰∏™):
{affected_files}
 
</project_context>
 
 
<summaries>
 
{summaries}
 
</summaries>
 
<rules>
 
1.  **Ê†∏ÂøÉÁõÆÁöÑ‰∏é‰∏ªË¶ÅÂÆûÁé∞**: ÊèêÁÇºÊú¨Ê¨°Á≥ªÂàóÂèòÊõ¥ÁöÑ**Ê†∏ÂøÉÁõÆÁöÑ**Âíå**‰∏ªË¶ÅÂÆûÁé∞ÊñπÂºè**ÔºåÁî®‰∏Ä‰∏§Âè•ËØùÊ¶ÇÊã¨„ÄÇÈÅøÂÖçÈÄêÊù°ÂàóÂá∫Êñá‰ª∂ÊàñÂáΩÊï∞ÁöÑ‰øÆÊîπ„ÄÇ
2.  **Conventional Commits ËßÑËåÉ**: ‰∏•Ê†ºÈÅµÂÆà Conventional Commits ËßÑËåÉÔºåÂåÖÊã¨Á±ªÂûãÔºàtypeÔºâ„ÄÅ‰ΩúÁî®ÂüüÔºàscopeÔºåÂ¶ÇÊûúÈÄÇÁî®ÔºâÂíåÊèèËø∞ÔºàsubjectÔºâ„ÄÇ
3.  **‰∏ª‰ΩìÂÜÖÂÆπ**: commit message ÁöÑ‰∏ª‰ΩìÈÉ®ÂàÜÂ∫îÊèê‰æõÊõ¥ËØ¶ÁªÜÁöÑËß£ÈáäÔºåËØ¥ÊòéÊú¨Ê¨°ÂèòÊõ¥ÁöÑËÉåÊôØ„ÄÅÂéüÂõ†ÂíåÂ∏¶Êù•ÁöÑÂ•ΩÂ§Ñ„ÄÇ
4.  **ËØ≠Ë®ÄÈ£éÊ†º**: ‰ΩøÁî®ÁÆÄÊ¥Å„ÄÅÊ∏ÖÊô∞„ÄÅ‰∏ì‰∏ö‰∏îÊòì‰∫éÁêÜËß£ÁöÑ‰∏≠Êñá„ÄÇ
5.  **ËæìÂá∫Ê†ºÂºè**: Âè™ËæìÂá∫Ë¢´ <commit_message> Ê†áÁ≠æÂåÖË£πÁöÑ commit message„ÄÇ
 
</rules>
 
<example>
 
<commit_message>
 
feat(history): ÂºïÂÖ•Êèê‰∫§ÂéÜÂè≤ÂΩíÊ°£‰∏éÊó•Êä•ÁîüÊàêÂäüËÉΩ
 
‰∏∫‰∫ÜÊõ¥Â•ΩÂú∞ËøΩË∏™ÂºÄÂèëËøõÂ∫¶ÂíåËá™Âä®ÂåñÁîüÊàêÂ∑•‰ΩúÊä•ÂëäÔºåÊú¨Ê¨°ÂºïÂÖ•‰∫ÜÊèê‰∫§ÂéÜÂè≤ÁöÑËá™Âä®ÂΩíÊ°£Êú∫Âà∂„ÄÇ
 
Ê≠§ÂäüËÉΩÈÄöËøá `post-commit` Git Èí©Â≠êÂÆûÁé∞ÔºåÁ°Æ‰øùÂè™ÊúâÊúÄÁªàË¢´ÈááÁ∫≥ÁöÑ commit Êâç‰ºöË¢´ËÆ∞ÂΩï„ÄÇÊñ∞Â¢ûÁöÑ `report` ÂëΩ‰ª§ÂèØ‰ª•Ë∞ÉÁî® AI ÊúçÂä°ÔºåÂ∞ÜÊØèÊó•ÁöÑÊèê‰∫§ËÆ∞ÂΩïÊô∫ËÉΩÂú∞Ê±áÊÄªÊàê‰∏Ä‰ªΩÁªìÊûÑÂåñÁöÑÂ∑•‰ΩúÊó•Êä•„ÄÇ
 
</commit_message>
 
</example>
"#
}

pub async fn get_prompt_template(name: &str) -> Result<String> {
    let config_dir = get_config_dir().await?;
    let prompt_path = config_dir.join("prompts").join(format!("{name}.toml"));

    if !prompt_path.exists() {
        return Err(anyhow::anyhow!(
            "ÊèêÁ§∫ËØçÊ®°ÊùøÊñá‰ª∂‰∏çÂ≠òÂú®: {prompt_path:?}„ÄÇËØ∑ËøêË°å 'matecode init' ÈáçÊñ∞ÂàõÂª∫„ÄÇ",
        ));
    }

    let mut content = fs::read_to_string(prompt_path).await?;

    // Âä†ËΩΩÈÖçÁΩÆ‰ª•Ëé∑ÂèñËØ≠Ë®ÄËÆæÁΩÆ
    let config = load_config().await?;
    let language_instruction = get_language_instruction(&config.language);

    // Âú®ÊèêÁ§∫ËØç‰∏≠ÊèíÂÖ•ËØ≠Ë®ÄËÆæÁΩÆ
    content = content.replace("{language_instruction}", &language_instruction);

    Ok(content)
}

fn get_language_instruction(language: &str) -> String {
    match language {
        "zh-CN" => "ËØ∑Âä°ÂøÖ‰ΩøÁî®ÁÆÄ‰Ωì‰∏≠ÊñáÂõûÂ§ç„ÄÇÊâÄÊúâËæìÂá∫ÂÜÖÂÆπÈÉΩÂ∫îËØ•ÊòØ‰∏≠ÊñáÔºåÂåÖÊã¨ÊäÄÊúØÊúØËØ≠ÁöÑÊèèËø∞ÂíåËß£Èáä„ÄÇ".to_string(),
        "en-US" => "Please respond in English. All output content should be in English, including technical terms and explanations.".to_string(),
        "ja-JP" => "Êó•Êú¨Ë™û„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åô„Åπ„Å¶„ÅÆÂá∫ÂäõÂÜÖÂÆπ„ÅØÊó•Êú¨Ë™û„Åß„ÄÅÊäÄË°ìÁî®Ë™û„ÅÆË™¨Êòé„ÇÇÂê´„ÇÅ„Å¶Êó•Êú¨Ë™û„ÅßË®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ".to_string(),
        "ko-KR" => "ÌïúÍµ≠Ïñ¥Î°ú ÎãµÎ≥ÄÌï¥ Ï£ºÏÑ∏Ïöî. Î™®Îì† Ï∂úÎ†• ÎÇ¥Ïö©ÏùÄ Í∏∞Ïà† Ïö©Ïñ¥ ÏÑ§Î™ÖÏùÑ Ìè¨Ìï®ÌïòÏó¨ ÌïúÍµ≠Ïñ¥Î°ú ÏûëÏÑ±ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.".to_string(),
        "fr-FR" => "Veuillez r√©pondre en fran√ßais. Tout le contenu de sortie doit √™tre en fran√ßais, y compris les descriptions de termes techniques.".to_string(),
        "de-DE" => "Bitte antworten Sie auf Deutsch. Alle Ausgabeinhalte sollten auf Deutsch sein, einschlie√ülich der Beschreibungen technischer Begriffe.".to_string(),
        "es-ES" => "Por favor responda en espa√±ol. Todo el contenido de salida debe estar en espa√±ol, incluidas las descripciones de t√©rminos t√©cnicos.".to_string(),
        "it-IT" => "Si prega di rispondere in italiano. Tutti i contenuti di output dovrebbero essere in italiano, comprese le descrizioni dei termini tecnici.".to_string(),
        "pt-BR" => "Por favor, responda em portugu√™s. Todo o conte√∫do de sa√≠da deve estar em portugu√™s, incluindo descri√ß√µes de termos t√©cnicos.".to_string(),
        "ru-RU" => "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.".to_string(),
        _ => format!("Please respond in the language: {language}. All output content should be in this language, including technical terms and explanations."),
    }
}


fn get_plan_clarify_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçËµÑÊ∑±ÁöÑ‰∫ßÂìÅÁªèÁêÜÂíåÊäÄÊúØÊû∂ÊûÑÂ∏à„ÄÇ‰Ω†ÁöÑ‰ªªÂä°ÊòØÈÄöËøáËãèÊ†ºÊãâÂ∫ïÂºèÊèêÈóÆÊù•ÊæÑÊ∏ÖÁî®Êà∑ÁöÑÊ®°Á≥äÈúÄÊ±ÇÔºåÂ∏ÆÂä©‰ªñ‰ª¨ÂΩ¢ÊàêÊ∏ÖÊô∞„ÄÅÂÖ∑‰ΩìÁöÑÈúÄÊ±ÇÊèèËø∞„ÄÇ

‰Ω†ÈúÄË¶ÅÔºö
1. Ê∑±ÂÖ•ÁêÜËß£Áî®Êà∑ÁöÑÁúüÂÆûÊÑèÂõæÂíå‰∏öÂä°ÁõÆÊ†á
2. ËØÜÂà´ÊäÄÊúØÂÆûÁé∞ÁöÑÂÖ≥ÈîÆÂÜ≥Á≠ñÁÇπ
3. ÂèëÁé∞ÂèØËÉΩÁöÑËæπÁïåÊÉÖÂÜµÂíåÁ∫¶ÊùüÊù°‰ª∂
4. Á°Æ‰øùÈúÄÊ±ÇÁöÑÂÆåÊï¥ÊÄßÂíåÂèØÂÆûÁé∞ÊÄß

ËØ∑ÁîüÊàê3-5‰∏™ÂÖ≥ÈîÆÈóÆÈ¢òÔºåÊØè‰∏™ÈóÆÈ¢òÈÉΩÂ∫îËØ•Â∏ÆÂä©ÊæÑÊ∏ÖÈúÄÊ±ÇÁöÑÈáçË¶ÅÊñπÈù¢„ÄÇ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
Áî®Êà∑ÊèêÂá∫ÁöÑÂéüÂßãÈúÄÊ±ÇÔºö{description}

ËØ∑ÁîüÊàê‰∏ÄÁ≥ªÂàóÊæÑÊ∏ÖÈóÆÈ¢òÔºåÂ∏ÆÂä©Ê∑±ÂÖ•ÁêÜËß£Ëøô‰∏™ÈúÄÊ±Ç„ÄÇÈóÆÈ¢òÂ∫îËØ•Ê∂µÁõñÔºö
- ‰∏öÂä°ÁõÆÊ†áÂíåÁî®Êà∑‰ª∑ÂÄº
- ÂäüËÉΩËæπÁïåÂíåÁ∫¶ÊùüÊù°‰ª∂
- ÊäÄÊúØÂÆûÁé∞ÁöÑÂÖ≥ÈîÆÂÜ≥Á≠ñÁÇπ
- ‰∏éÁé∞ÊúâÁ≥ªÁªüÁöÑÈõÜÊàêÊñπÂºè
- ÊÄßËÉΩÂíåÂÆâÂÖ®Ë¶ÅÊ±Ç

ËØ∑‰ª•ÂàóË°®ÂΩ¢ÂºèËæìÂá∫ÈóÆÈ¢òÔºåÊØèË°å‰∏Ä‰∏™ÈóÆÈ¢òÔºå‰ΩøÁî® "- " ÂºÄÂ§¥„ÄÇ

‰æãÂ¶ÇÔºö
- Ëøô‰∏™ÂäüËÉΩÁöÑ‰∏ªË¶ÅÁõÆÊ†áÁî®Êà∑ÊòØË∞ÅÔºü
- È¢ÑÊúüÁöÑÂπ∂ÂèëÁî®Êà∑Êï∞ÈáèÊòØÂ§öÂ∞ëÔºü
- ÊòØÂê¶ÈúÄË¶Å‰∏éÁé∞ÊúâÁöÑËÆ§ËØÅÁ≥ªÁªüÈõÜÊàêÔºü
"#
}

fn get_plan_clarify_specific_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçÊäÄÊúØ‰∏ìÂÆ∂„ÄÇÂü∫‰∫éÁî®Êà∑ÁöÑÈúÄÊ±ÇÊèèËø∞ÔºåÁîüÊàê2-3‰∏™ÈíàÂØπËØ•ÁâπÂÆöÈúÄÊ±ÇÁöÑÊ∑±Â∫¶ÊæÑÊ∏ÖÈóÆÈ¢ò„ÄÇ

Ëøô‰∫õÈóÆÈ¢òÂ∫îËØ•Ôºö
1. ÈíàÂØπËØ•ÈúÄÊ±ÇÁöÑÁâπÂÆöÊäÄÊúØÈ¢ÜÂüüÊàñ‰∏öÂä°Âú∫ÊôØ
2. Ê∑±ÂÖ•ÊåñÊéòÂÆûÁé∞ÁªÜËäÇÂíåËæπÁïåÊù°‰ª∂
3. ÈÅøÂÖç‰∏éÈÄöÁî®ÈóÆÈ¢òÈáçÂ§ç

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
Áî®Êà∑ÁöÑÂÖ∑‰ΩìÈúÄÊ±ÇÔºö{description}

ËØ∑Âü∫‰∫éËøô‰∏™ÈúÄÊ±ÇÁöÑÁâπÁÇπÔºåÁîüÊàê2-3‰∏™Ê∑±Â∫¶ÊæÑÊ∏ÖÈóÆÈ¢ò„ÄÇÈóÆÈ¢òÂ∫îËØ•ÈíàÂØπÔºö
- ËØ•ÈúÄÊ±ÇÁâπÊúâÁöÑÊäÄÊúØÊåëÊàò
- ÂÖ∑‰ΩìÁöÑÂÆûÁé∞ÊñπÂºèÈÄâÊã©
- ÁâπÊÆäÁöÑ‰∏öÂä°ËßÑÂàôÊàñÁ∫¶Êùü

ËØ∑‰ª•ÂàóË°®ÂΩ¢ÂºèËæìÂá∫ÔºåÊØèË°å‰∏Ä‰∏™ÈóÆÈ¢òÔºå‰ΩøÁî® "- " ÂºÄÂ§¥„ÄÇ

‰æãÂ¶ÇÔºàÈíàÂØπ"Áî®Êà∑ÂæΩÁ´†Á≥ªÁªü"ÔºâÔºö
- ÂæΩÁ´†ÊòØÂê¶ÊîØÊåÅÁ≠âÁ∫ßÂà∂Â∫¶ÔºüÊØîÂ¶ÇÈìúÁâå„ÄÅÈì∂Áâå„ÄÅÈáëÁâåÔºü
- ÂæΩÁ´†ÁöÑÂ±ïÁ§∫‰ΩçÁΩÆÊúâÂì™‰∫õÔºüÁî®Êà∑Â§¥ÂÉè„ÄÅ‰∏™‰∫∫‰∏ªÈ°µ„ÄÅËøòÊòØËØÑËÆ∫Âå∫Ôºü
- ÊòØÂê¶ÈúÄË¶ÅÂæΩÁ´†ÁöÑËé∑ÂèñÂéÜÂè≤ËÆ∞ÂΩïÂíåÁªüËÆ°ÂäüËÉΩÔºü
"#
}

fn get_plan_generate_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçÁªèÈ™å‰∏∞ÂØåÁöÑÊäÄÊúØÊû∂ÊûÑÂ∏àÂíåÈ°πÁõÆÁªèÁêÜ„ÄÇÂü∫‰∫éÊæÑÊ∏ÖÂêéÁöÑÈúÄÊ±Ç‰ø°ÊÅØÔºå‰Ω†ÈúÄË¶ÅÁîüÊàê‰∏Ä‰∏™ËØ¶ÁªÜÁöÑÊäÄÊúØÂÆûÊñΩËÆ°Âàí„ÄÇ

ËÆ°ÂàíÂ∫îËØ•ÂåÖÊã¨Ôºö
1. Ê∏ÖÊô∞ÁöÑÊäÄÊúØÊñπÊ°àÊèèËø∞
2. ËØ¶ÁªÜÁöÑ‰ªªÂä°ÂàÜËß£
3. ÂΩ±ÂìçÂàÜÊûê
4. ÂÆûÊñΩÂª∫ËÆÆ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
**ÂéüÂßãÈúÄÊ±Ç**: {original_description}

**ÊæÑÊ∏ÖÂêéÁöÑÈúÄÊ±Ç‰ø°ÊÅØ**:
{clarified_requirements}

ËØ∑Âü∫‰∫é‰ª•‰∏ä‰ø°ÊÅØÁîüÊàê‰∏Ä‰∏™ËØ¶ÁªÜÁöÑÊäÄÊúØÂÆûÊñΩËÆ°Âàí„ÄÇËÆ°ÂàíÂ∫îËØ•ÂåÖÊã¨Ôºö

## ÊäÄÊúØÊñπÊ°à
ÊèèËø∞Êï¥‰ΩìÁöÑÊäÄÊúØÂÆûÁé∞ÊñπÊ°àÂíåÊû∂ÊûÑËÆæËÆ°

## ‰ªªÂä°ÂàÜËß£
Â∞ÜÂÆûÊñΩËøáÁ®ãÂàÜËß£‰∏∫ÂÖ∑‰ΩìÁöÑ‰ªªÂä°ÔºåÊØè‰∏™‰ªªÂä°Â∫îËØ•ÂåÖÊã¨Ôºö
- ‰ªªÂä°Ê†áÈ¢ò
- ËØ¶ÁªÜÊèèËø∞
- È¢Ñ‰º∞Â∑•Êó∂
- Ê∂âÂèäÁöÑÊñá‰ª∂ÊàñÊ®°Âùó
- ‰æùËµñÂÖ≥Á≥ª

## ÂΩ±ÂìçÂàÜÊûê
ÂàÜÊûêËøô‰∏™ÈúÄÊ±ÇÂØπÁé∞ÊúâÁ≥ªÁªüÂèØËÉΩ‰∫ßÁîüÁöÑÂΩ±Âìç

## ÂÆûÊñΩÂª∫ËÆÆ
Êèê‰æõÂÆûÊñΩËøáÁ®ã‰∏≠ÁöÑÊ≥®ÊÑè‰∫ãÈ°πÂíåÂª∫ËÆÆ

ËØ∑‰ΩøÁî®ÁªìÊûÑÂåñÁöÑÊ†ºÂºèËæìÂá∫Ôºå‰æø‰∫éÂêéÁª≠Ëß£ÊûêÂíåÂ§ÑÁêÜ„ÄÇ
"#
}

fn get_doc_generate_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçÊäÄÊúØÊñáÊ°£‰∏ìÂÆ∂„ÄÇ‰Ω†ÈúÄË¶ÅÂü∫‰∫éÊèê‰æõÁöÑËÆ°ÂàíÂíå‰ª£Á†ÅÂàÜÊûêÁªìÊûúÔºåÁîüÊàê‰∏Ä‰ªΩÈ´òË¥®ÈáèÁöÑÊäÄÊúØÊñáÊ°£„ÄÇ

ÊñáÊ°£Â∫îËØ•Ôºö
1. ÁªìÊûÑÊ∏ÖÊô∞ÔºåÈÄªËæëÊÄßÂº∫
2. ÂåÖÂê´ÂøÖË¶ÅÁöÑÊäÄÊúØÁªÜËäÇ
3. ‰æø‰∫éÂºÄÂèëËÄÖÁêÜËß£ÂíåÂÆûÊñΩ
4. ÂåÖÂê´‰ª£Á†ÅÁ§∫‰æãÂíåÊúÄ‰Ω≥ÂÆûË∑µ

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
ËØ∑Âü∫‰∫é‰ª•‰∏ã‰ø°ÊÅØÁîüÊàêÊäÄÊúØÊñáÊ°£Ôºö

{context}

ËØ∑ÁîüÊàê‰∏Ä‰ªΩÂåÖÂê´‰ª•‰∏ãÁ´†ËäÇÁöÑÊäÄÊúØÊñáÊ°£Ôºö

## Ê¶ÇËø∞
ÁÆÄË¶ÅÊèèËø∞ÂäüËÉΩÁõÆÊ†áÂíå‰ª∑ÂÄº

## ÊäÄÊúØÊñπÊ°à
ËØ¶ÁªÜËØ¥ÊòéÊäÄÊúØÂÆûÁé∞ÊñπÊ°à

## Á≥ªÁªüÊû∂ÊûÑ
ÊèèËø∞Á≥ªÁªüÁöÑÊï¥‰ΩìÊû∂ÊûÑÂíåÁªÑ‰ª∂ÂÖ≥Á≥ª

## Ê†∏ÂøÉ‰∏öÂä°ÊµÅÁ®ã
ËØ¥Êòé‰∏ªË¶ÅÁöÑ‰∏öÂä°ÊµÅÁ®ãÂíåÊï∞ÊçÆÊµÅ

## ÂÖ≥ÈîÆÂÆûÁé∞ÁªÜËäÇ
ÈáçË¶ÅÁöÑÊäÄÊúØÂÆûÁé∞ÁªÜËäÇÂíåÊ≥®ÊÑè‰∫ãÈ°π

## Êï∞ÊçÆÁªìÊûÑËÆæËÆ°
Áõ∏ÂÖ≥ÁöÑÊï∞ÊçÆÁªìÊûÑÂíåÊé•Âè£ËÆæËÆ°

## ÊµãËØïÁ≠ñÁï•
ÊµãËØïÊñπÊ°àÂíåÈ™åÊî∂Ê†áÂáÜ

## ÈÉ®ÁΩ≤ÂíåËøêÁª¥
ÈÉ®ÁΩ≤ÊµÅÁ®ãÂíåËøêÁª¥Ê≥®ÊÑè‰∫ãÈ°π

ËØ∑Á°Æ‰øùÊñáÊ°£ÂÜÖÂÆπËØ¶ÂÆû„ÄÅÂáÜÁ°ÆÔºåÂπ∂ÂåÖÂê´ÂøÖË¶ÅÁöÑ‰ª£Á†ÅÁ§∫‰æã„ÄÇ
"#
}

fn get_diagram_generate_prompt_template() -> &'static str {
    r#"[system]
‰Ω†ÊòØ‰∏Ä‰ΩçÁ≥ªÁªüÊû∂ÊûÑÂ∏àÂíåÊµÅÁ®ãËÆæËÆ°‰∏ìÂÆ∂„ÄÇ‰Ω†ÈúÄË¶ÅÂü∫‰∫éÊèê‰æõÁöÑ‰∏ä‰∏ãÊñá‰ø°ÊÅØÔºåÁîüÊàêÁõ∏Â∫îÁöÑMermaidÂõæË°®‰ª£Á†Å„ÄÇ

‰Ω†ÂèØ‰ª•ÁîüÊàê‰ª•‰∏ãÁ±ªÂûãÁöÑÂõæË°®Ôºö
1. ÊµÅÁ®ãÂõæ (flowchart) - Â±ïÁ§∫‰∏öÂä°ÊµÅÁ®ãÊàñÁÆóÊ≥ïÊµÅÁ®ã
2. Êó∂Â∫èÂõæ (sequenceDiagram) - Â±ïÁ§∫ÁªÑ‰ª∂Èó¥ÁöÑ‰∫§‰∫íÊó∂Â∫è
3. Á±ªÂõæ (classDiagram) - Â±ïÁ§∫Á±ªÁöÑÁªìÊûÑÂíåÂÖ≥Á≥ª
4. ÁªÑ‰ª∂Âõæ - Â±ïÁ§∫Á≥ªÁªüÁªÑ‰ª∂Âíå‰æùËµñÂÖ≥Á≥ª

**ÈáçË¶ÅÔºöËØ≠Ë®ÄË¶ÅÊ±Ç**
{language_instruction}

[user]
ËØ∑Âü∫‰∫é‰ª•‰∏ã‰∏ä‰∏ãÊñá‰ø°ÊÅØÁîüÊàêÂêàÈÄÇÁöÑMermaidÂõæË°®Ôºö

{context}

ËØ∑ÁîüÊàê1-3‰∏™ÊúÄËÉΩËØ¥ÊòéÁ≥ªÁªüËÆæËÆ°ÁöÑÂõæË°®„ÄÇÊØè‰∏™ÂõæË°®Â∫îËØ•Ôºö
1. ÊúâÊ∏ÖÊô∞ÁöÑÊ†áÈ¢ò
2. ‰ΩøÁî®Ê≠£Á°ÆÁöÑMermaidËØ≠Ê≥ï
3. ÂåÖÂê´ÂøÖË¶ÅÁöÑËØ¥Êòé

ËØ∑‰ΩøÁî®‰ª•‰∏ãÊ†ºÂºèËæìÂá∫Ôºö

## ÂõæË°®Ê†áÈ¢ò
```mermaid
ÂõæË°®‰ª£Á†Å
```

‰æãÂ¶ÇÔºö

## Áî®Êà∑ËÆ§ËØÅÊµÅÁ®ã
```mermaid
flowchart TD
    A[Áî®Êà∑ÁôªÂΩï] --> B{È™åËØÅÂá≠ÊçÆ}
    B -->|ÊàêÂäü| C[ÁîüÊàêToken]
    B -->|Â§±Ë¥•| D[ËøîÂõûÈîôËØØ]
    C --> E[ËøîÂõûÊàêÂäüÂìçÂ∫î]
```

ËØ∑Á°Æ‰øùÂõæË°®ËØ≠Ê≥ïÊ≠£Á°ÆÔºåËÉΩÂ§üÊ≠£Â∏∏Ê∏≤Êüì„ÄÇ
"#
}

