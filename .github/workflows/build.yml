name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: matecode-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: matecode-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: matecode-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: matecode-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: matecode-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: matecode-windows-x86_64.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
    
    - name: Install cross (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo install cross --git https://github.com/cross-rs/cross
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build (Linux cross-compile)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cross build --release --target ${{ matrix.target }}
    
    - name: Build (Native)
      if: matrix.os != 'ubuntu-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/matecode ${{ matrix.name }}
        strip ${{ matrix.name }}
    
    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/matecode.exe ${{ matrix.name }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*/*
        body: |
          ## 🚀 Release ${{ github.ref_name }}
          
          ### 📦 下载链接
          
          - **Linux x86_64**: matecode-linux-x86_64
          - **Linux x86_64 (musl)**: matecode-linux-x86_64-musl  
          - **Linux ARM64**: matecode-linux-aarch64
          - **macOS x86_64**: matecode-macos-x86_64
          - **macOS ARM64**: matecode-macos-aarch64
          - **Windows x86_64**: matecode-windows-x86_64.exe
          
          ### 🛠️ 安装方法
          
          1. 下载对应平台的二进制文件
          2. 重命名为 `matecode` (Windows 下为 `matecode.exe`)
          3. 将其放入 PATH 环境变量中
          4. 运行 `matecode init` 初始化配置
          
          ### 📝 更新日志
          
          请查看 [CHANGELOG.md](CHANGELOG.md) 获取详细更新内容。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 